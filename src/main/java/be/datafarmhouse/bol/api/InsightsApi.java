/*
 * v8 - Retailer API
 * The bol.com API for retailers.
 *
 * OpenAPI spec version: 8.x
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package be.datafarmhouse.bol.api;

import be.datafarmhouse.bol.*;
import be.datafarmhouse.bol.model.OfferInsights;
import be.datafarmhouse.bol.model.PerformanceIndicators;
import be.datafarmhouse.bol.model.SalesForecastResponse;
import be.datafarmhouse.bol.model.SearchTerms;
import com.google.gson.reflect.TypeToken;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InsightsApi {
    private ApiClient apiClient;

    public InsightsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InsightsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getOfferInsights
     *
     * @param offerId                 Unique identifier for an offer. (required)
     * @param period                  The time unit in which the offer insights are grouped. (required)
     * @param numberOfPeriods         The number of periods for which the offer insights are requested back in time. The maximum available periods are 24 for MONTH, 104 for WEEK, and 730 for DAY. (required)
     * @param name                    The name of the requested offer insight. (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOfferInsightsCall(String offerId, String period, Integer numberOfPeriods, List<String> name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retailer/insights/offer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offerId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("offer-id", offerId));
        if (period != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("period", period));
        if (numberOfPeriods != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("number-of-periods", numberOfPeriods));
        if (name != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.retailer.v8+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOfferInsightsValidateBeforeCall(String offerId, String period, Integer numberOfPeriods, List<String> name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling getOfferInsights(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling getOfferInsights(Async)");
        }

        // verify the required parameter 'numberOfPeriods' is set
        if (numberOfPeriods == null) {
            throw new ApiException("Missing the required parameter 'numberOfPeriods' when calling getOfferInsights(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getOfferInsights(Async)");
        }


        com.squareup.okhttp.Call call = getOfferInsightsCall(offerId, period, numberOfPeriods, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get offer insights
     * Get the product visits and the buy box percentage for an offer during a given period.
     *
     * @param offerId         Unique identifier for an offer. (required)
     * @param period          The time unit in which the offer insights are grouped. (required)
     * @param numberOfPeriods The number of periods for which the offer insights are requested back in time. The maximum available periods are 24 for MONTH, 104 for WEEK, and 730 for DAY. (required)
     * @param name            The name of the requested offer insight. (required)
     * @return OfferInsights
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OfferInsights getOfferInsights(String offerId, String period, Integer numberOfPeriods, List<String> name) throws ApiException {
        ApiResponse<OfferInsights> resp = getOfferInsightsWithHttpInfo(offerId, period, numberOfPeriods, name);
        return resp.getData();
    }

    /**
     * Get offer insights
     * Get the product visits and the buy box percentage for an offer during a given period.
     *
     * @param offerId         Unique identifier for an offer. (required)
     * @param period          The time unit in which the offer insights are grouped. (required)
     * @param numberOfPeriods The number of periods for which the offer insights are requested back in time. The maximum available periods are 24 for MONTH, 104 for WEEK, and 730 for DAY. (required)
     * @param name            The name of the requested offer insight. (required)
     * @return ApiResponse&lt;OfferInsights&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OfferInsights> getOfferInsightsWithHttpInfo(String offerId, String period, Integer numberOfPeriods, List<String> name) throws ApiException {
        com.squareup.okhttp.Call call = getOfferInsightsValidateBeforeCall(offerId, period, numberOfPeriods, name, null, null);
        Type localVarReturnType = new TypeToken<OfferInsights>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get offer insights (asynchronously)
     * Get the product visits and the buy box percentage for an offer during a given period.
     *
     * @param offerId         Unique identifier for an offer. (required)
     * @param period          The time unit in which the offer insights are grouped. (required)
     * @param numberOfPeriods The number of periods for which the offer insights are requested back in time. The maximum available periods are 24 for MONTH, 104 for WEEK, and 730 for DAY. (required)
     * @param name            The name of the requested offer insight. (required)
     * @param callback        The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOfferInsightsAsync(String offerId, String period, Integer numberOfPeriods, List<String> name, final ApiCallback<OfferInsights> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOfferInsightsValidateBeforeCall(offerId, period, numberOfPeriods, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OfferInsights>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for getPerformanceIndicators
     *
     * @param name                    The type of the performance indicator (required)
     * @param year                    Year number in the ISO-8601 standard. (required)
     * @param week                    Week number in the ISO-8601 standard. If you would like to get the relative scores from the current week, please provide the current week number here. Be advised that measurements can change heavily over the course of the week. (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPerformanceIndicatorsCall(List<String> name, String year, String week, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retailer/insights/performance/indicator";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (year != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("year", year));
        if (week != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("week", week));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.retailer.v8+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPerformanceIndicatorsValidateBeforeCall(List<String> name, String year, String week, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPerformanceIndicators(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getPerformanceIndicators(Async)");
        }

        // verify the required parameter 'week' is set
        if (week == null) {
            throw new ApiException("Missing the required parameter 'week' when calling getPerformanceIndicators(Async)");
        }


        com.squareup.okhttp.Call call = getPerformanceIndicatorsCall(name, year, week, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get performance indicators
     * Gets the measurements for your performance indicators per week.
     *
     * @param name The type of the performance indicator (required)
     * @param year Year number in the ISO-8601 standard. (required)
     * @param week Week number in the ISO-8601 standard. If you would like to get the relative scores from the current week, please provide the current week number here. Be advised that measurements can change heavily over the course of the week. (required)
     * @return PerformanceIndicators
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PerformanceIndicators getPerformanceIndicators(List<String> name, String year, String week) throws ApiException {
        ApiResponse<PerformanceIndicators> resp = getPerformanceIndicatorsWithHttpInfo(name, year, week);
        return resp.getData();
    }

    /**
     * Get performance indicators
     * Gets the measurements for your performance indicators per week.
     *
     * @param name The type of the performance indicator (required)
     * @param year Year number in the ISO-8601 standard. (required)
     * @param week Week number in the ISO-8601 standard. If you would like to get the relative scores from the current week, please provide the current week number here. Be advised that measurements can change heavily over the course of the week. (required)
     * @return ApiResponse&lt;PerformanceIndicators&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PerformanceIndicators> getPerformanceIndicatorsWithHttpInfo(List<String> name, String year, String week) throws ApiException {
        com.squareup.okhttp.Call call = getPerformanceIndicatorsValidateBeforeCall(name, year, week, null, null);
        Type localVarReturnType = new TypeToken<PerformanceIndicators>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get performance indicators (asynchronously)
     * Gets the measurements for your performance indicators per week.
     *
     * @param name     The type of the performance indicator (required)
     * @param year     Year number in the ISO-8601 standard. (required)
     * @param week     Week number in the ISO-8601 standard. If you would like to get the relative scores from the current week, please provide the current week number here. Be advised that measurements can change heavily over the course of the week. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPerformanceIndicatorsAsync(List<String> name, String year, String week, final ApiCallback<PerformanceIndicators> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPerformanceIndicatorsValidateBeforeCall(name, year, week, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PerformanceIndicators>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for getSalesForecast
     *
     * @param offerId                 Unique identifier for an offer. (required)
     * @param weeksAhead              The number of weeks into the future, starting from today. (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSalesForecastCall(String offerId, Integer weeksAhead, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retailer/insights/sales-forecast";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offerId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("offer-id", offerId));
        if (weeksAhead != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("weeks-ahead", weeksAhead));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.retailer.v8+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSalesForecastValidateBeforeCall(String offerId, Integer weeksAhead, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling getSalesForecast(Async)");
        }

        // verify the required parameter 'weeksAhead' is set
        if (weeksAhead == null) {
            throw new ApiException("Missing the required parameter 'weeksAhead' when calling getSalesForecast(Async)");
        }


        com.squareup.okhttp.Call call = getSalesForecastCall(offerId, weeksAhead, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get sales forecast
     * Get sales forecast to estimate the sales expectations on the total bol.com platform for the requested number of weeks ahead.
     *
     * @param offerId    Unique identifier for an offer. (required)
     * @param weeksAhead The number of weeks into the future, starting from today. (required)
     * @return SalesForecastResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SalesForecastResponse getSalesForecast(String offerId, Integer weeksAhead) throws ApiException {
        ApiResponse<SalesForecastResponse> resp = getSalesForecastWithHttpInfo(offerId, weeksAhead);
        return resp.getData();
    }

    /**
     * Get sales forecast
     * Get sales forecast to estimate the sales expectations on the total bol.com platform for the requested number of weeks ahead.
     *
     * @param offerId    Unique identifier for an offer. (required)
     * @param weeksAhead The number of weeks into the future, starting from today. (required)
     * @return ApiResponse&lt;SalesForecastResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SalesForecastResponse> getSalesForecastWithHttpInfo(String offerId, Integer weeksAhead) throws ApiException {
        com.squareup.okhttp.Call call = getSalesForecastValidateBeforeCall(offerId, weeksAhead, null, null);
        Type localVarReturnType = new TypeToken<SalesForecastResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get sales forecast (asynchronously)
     * Get sales forecast to estimate the sales expectations on the total bol.com platform for the requested number of weeks ahead.
     *
     * @param offerId    Unique identifier for an offer. (required)
     * @param weeksAhead The number of weeks into the future, starting from today. (required)
     * @param callback   The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSalesForecastAsync(String offerId, Integer weeksAhead, final ApiCallback<SalesForecastResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSalesForecastValidateBeforeCall(offerId, weeksAhead, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SalesForecastResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for getSearchTerms
     *
     * @param searchTerm              The search term for which you want to request the search volume. (required)
     * @param period                  The time unit in which the offer insights are grouped. (required)
     * @param numberOfPeriods         The number of periods for which the offer insights are requested back in time. (required)
     * @param relatedSearchTerms      Indicates whether or not you want to retrieve the related search terms. (optional, default to false)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSearchTermsCall(String searchTerm, String period, Integer numberOfPeriods, Boolean relatedSearchTerms, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retailer/insights/search-terms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (searchTerm != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("search-term", searchTerm));
        if (period != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("period", period));
        if (numberOfPeriods != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("number-of-periods", numberOfPeriods));
        if (relatedSearchTerms != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("related-search-terms", relatedSearchTerms));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.retailer.v8+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSearchTermsValidateBeforeCall(String searchTerm, String period, Integer numberOfPeriods, Boolean relatedSearchTerms, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'searchTerm' is set
        if (searchTerm == null) {
            throw new ApiException("Missing the required parameter 'searchTerm' when calling getSearchTerms(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling getSearchTerms(Async)");
        }

        // verify the required parameter 'numberOfPeriods' is set
        if (numberOfPeriods == null) {
            throw new ApiException("Missing the required parameter 'numberOfPeriods' when calling getSearchTerms(Async)");
        }


        com.squareup.okhttp.Call call = getSearchTermsCall(searchTerm, period, numberOfPeriods, relatedSearchTerms, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get search terms
     * Retrieves the search volume for a specified search term and period. The search volume allows you to see what bol.com customers are searching for. Based on the search volume per search term you can optimize your product content, or spot opportunities to extend your assortment, or analyzing trends for inventory management.
     *
     * @param searchTerm         The search term for which you want to request the search volume. (required)
     * @param period             The time unit in which the offer insights are grouped. (required)
     * @param numberOfPeriods    The number of periods for which the offer insights are requested back in time. (required)
     * @param relatedSearchTerms Indicates whether or not you want to retrieve the related search terms. (optional, default to false)
     * @return SearchTerms
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchTerms getSearchTerms(String searchTerm, String period, Integer numberOfPeriods, Boolean relatedSearchTerms) throws ApiException {
        ApiResponse<SearchTerms> resp = getSearchTermsWithHttpInfo(searchTerm, period, numberOfPeriods, relatedSearchTerms);
        return resp.getData();
    }

    /**
     * Get search terms
     * Retrieves the search volume for a specified search term and period. The search volume allows you to see what bol.com customers are searching for. Based on the search volume per search term you can optimize your product content, or spot opportunities to extend your assortment, or analyzing trends for inventory management.
     *
     * @param searchTerm         The search term for which you want to request the search volume. (required)
     * @param period             The time unit in which the offer insights are grouped. (required)
     * @param numberOfPeriods    The number of periods for which the offer insights are requested back in time. (required)
     * @param relatedSearchTerms Indicates whether or not you want to retrieve the related search terms. (optional, default to false)
     * @return ApiResponse&lt;SearchTerms&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchTerms> getSearchTermsWithHttpInfo(String searchTerm, String period, Integer numberOfPeriods, Boolean relatedSearchTerms) throws ApiException {
        com.squareup.okhttp.Call call = getSearchTermsValidateBeforeCall(searchTerm, period, numberOfPeriods, relatedSearchTerms, null, null);
        Type localVarReturnType = new TypeToken<SearchTerms>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get search terms (asynchronously)
     * Retrieves the search volume for a specified search term and period. The search volume allows you to see what bol.com customers are searching for. Based on the search volume per search term you can optimize your product content, or spot opportunities to extend your assortment, or analyzing trends for inventory management.
     *
     * @param searchTerm         The search term for which you want to request the search volume. (required)
     * @param period             The time unit in which the offer insights are grouped. (required)
     * @param numberOfPeriods    The number of periods for which the offer insights are requested back in time. (required)
     * @param relatedSearchTerms Indicates whether or not you want to retrieve the related search terms. (optional, default to false)
     * @param callback           The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSearchTermsAsync(String searchTerm, String period, Integer numberOfPeriods, Boolean relatedSearchTerms, final ApiCallback<SearchTerms> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSearchTermsValidateBeforeCall(searchTerm, period, numberOfPeriods, relatedSearchTerms, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchTerms>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
