/*
 * v8 - Retailer API
 * The bol.com API for retailers.
 *
 * OpenAPI spec version: 8.x
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package be.datafarmhouse.bol.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.Objects;

/**
 * PerformanceIndicator
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-12-04T20:35:33.904+01:00")
public class PerformanceIndicator {
    /**
     * Indicator name.
     */
    @JsonAdapter(NameEnum.Adapter.class)
    public enum NameEnum {
        CANCELLATIONS("CANCELLATIONS"),

        FULFILMENT("FULFILMENT"),

        PHONE_AVAILABILITY("PHONE_AVAILABILITY"),

        RESPONSE_TIME("RESPONSE_TIME"),

        CASE_ITEM_RATIO("CASE_ITEM_RATIO"),

        TRACK_AND_TRACE("TRACK_AND_TRACE"),

        RETURNS("RETURNS"),

        REVIEWS("REVIEWS");

        private String value;

        NameEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static NameEnum fromValue(String text) {
            for (NameEnum b : NameEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<NameEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final NameEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public NameEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return NameEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("name")
    private NameEnum name = null;

    /**
     * Interpretation of the data that applies to this measurement.
     */
    @JsonAdapter(TypeEnum.Adapter.class)
    public enum TypeEnum {
        PERCENTAGE("PERCENTAGE"),

        AVERAGE("AVERAGE");

        private String value;

        TypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static TypeEnum fromValue(String text) {
            for (TypeEnum b : TypeEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<TypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public TypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return TypeEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("type")
    private TypeEnum type = null;

    @SerializedName("details")
    private Details details = null;

    public PerformanceIndicator name(NameEnum name) {
        this.name = name;
        return this;
    }

    /**
     * Indicator name.
     *
     * @return name
     **/
    @ApiModelProperty(example = "CANCELLATIONS", required = true, value = "Indicator name.")
    public NameEnum getName() {
        return name;
    }

    public void setName(NameEnum name) {
        this.name = name;
    }

    public PerformanceIndicator type(TypeEnum type) {
        this.type = type;
        return this;
    }

    /**
     * Interpretation of the data that applies to this measurement.
     *
     * @return type
     **/
    @ApiModelProperty(example = "PERCENTAGE", required = true, value = "Interpretation of the data that applies to this measurement.")
    public TypeEnum getType() {
        return type;
    }

    public void setType(TypeEnum type) {
        this.type = type;
    }

    public PerformanceIndicator details(Details details) {
        this.details = details;
        return this;
    }

    /**
     * Details of the indicator.
     *
     * @return details
     **/
    @ApiModelProperty(required = true, value = "Details of the indicator.")
    public Details getDetails() {
        return details;
    }

    public void setDetails(Details details) {
        this.details = details;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PerformanceIndicator performanceIndicator = (PerformanceIndicator) o;
        return Objects.equals(this.name, performanceIndicator.name) &&
                Objects.equals(this.type, performanceIndicator.type) &&
                Objects.equals(this.details, performanceIndicator.details);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, type, details);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PerformanceIndicator {\n");

        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    details: ").append(toIndentedString(details)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

