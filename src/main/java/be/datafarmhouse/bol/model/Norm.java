/*
 * v8 - Retailer API
 * The bol.com API for retailers.
 *
 * OpenAPI spec version: 8.x
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package be.datafarmhouse.bol.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.Objects;

/**
 * Norm
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-12-04T20:35:33.904+01:00")
public class Norm {
    /**
     * Condition norm for this indicator.
     */
    @JsonAdapter(ConditionEnum.Adapter.class)
    public enum ConditionEnum {
        LESS_THAN_OR_EQUAL_TO("<="),

        GREATER_THAN_OR_EQUAL_TO(">=");

        private String value;

        ConditionEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static ConditionEnum fromValue(String text) {
            for (ConditionEnum b : ConditionEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<ConditionEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ConditionEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public ConditionEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return ConditionEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("condition")
    private ConditionEnum condition = null;

    @SerializedName("value")
    private Float value = null;

    public Norm condition(ConditionEnum condition) {
        this.condition = condition;
        return this;
    }

    /**
     * Condition norm for this indicator.
     *
     * @return condition
     **/
    @ApiModelProperty(example = "<=", required = true, value = "Condition norm for this indicator.")
    public ConditionEnum getCondition() {
        return condition;
    }

    public void setCondition(ConditionEnum condition) {
        this.condition = condition;
    }

    public Norm value(Float value) {
        this.value = value;
        return this;
    }

    /**
     * Service norm for this indicator.
     *
     * @return value
     **/
    @ApiModelProperty(example = "0.6", required = true, value = "Service norm for this indicator.")
    public Float getValue() {
        return value;
    }

    public void setValue(Float value) {
        this.value = value;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Norm norm = (Norm) o;
        return Objects.equals(this.condition, norm.condition) &&
                Objects.equals(this.value, norm.value);
    }

    @Override
    public int hashCode() {
        return Objects.hash(condition, value);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Norm {\n");

        sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
        sb.append("    value: ").append(toIndentedString(value)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

