/*
 * v8 - Retailer API
 * The bol.com API for retailers.
 *
 * OpenAPI spec version: 8.x
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package be.datafarmhouse.bol.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.Objects;

/**
 * Fulfilment
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-12-04T20:35:33.904+01:00")
public class Fulfilment {
    /**
     * The fulfilment method. Fulfilled by the retailer (FBR) or fulfilled by bol.com (FBB).
     */
    @JsonAdapter(MethodEnum.Adapter.class)
    public enum MethodEnum {
        FBR("FBR"),

        FBB("FBB");

        private String value;

        MethodEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static MethodEnum fromValue(String text) {
            for (MethodEnum b : MethodEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<MethodEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final MethodEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public MethodEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return MethodEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("method")
    private MethodEnum method = null;

    /**
     * The delivery promise that applies to this offer. This value will only be used in combination with fulfilmentMethod &#39;FBR&#39;.
     */
    @JsonAdapter(DeliveryCodeEnum.Adapter.class)
    public enum DeliveryCodeEnum {
        _24UURS_23("24uurs-23"),

        _24UURS_22("24uurs-22"),

        _24UURS_21("24uurs-21"),

        _24UURS_20("24uurs-20"),

        _24UURS_19("24uurs-19"),

        _24UURS_18("24uurs-18"),

        _24UURS_17("24uurs-17"),

        _24UURS_16("24uurs-16"),

        _24UURS_15("24uurs-15"),

        _24UURS_14("24uurs-14"),

        _24UURS_13("24uurs-13"),

        _24UURS_12("24uurs-12"),

        _1_2D("1-2d"),

        _2_3D("2-3d"),

        _3_5D("3-5d"),

        _4_8D("4-8d"),

        _1_8D("1-8d"),

        MIJNLEVERBELOFTE("MijnLeverbelofte"),

        VVB("VVB");

        private String value;

        DeliveryCodeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static DeliveryCodeEnum fromValue(String text) {
            for (DeliveryCodeEnum b : DeliveryCodeEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<DeliveryCodeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final DeliveryCodeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public DeliveryCodeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return DeliveryCodeEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("deliveryCode")
    private DeliveryCodeEnum deliveryCode = null;

    public Fulfilment method(MethodEnum method) {
        this.method = method;
        return this;
    }

    /**
     * The fulfilment method. Fulfilled by the retailer (FBR) or fulfilled by bol.com (FBB).
     *
     * @return method
     **/
    @ApiModelProperty(example = "FBR", required = true, value = "The fulfilment method. Fulfilled by the retailer (FBR) or fulfilled by bol.com (FBB).")
    public MethodEnum getMethod() {
        return method;
    }

    public void setMethod(MethodEnum method) {
        this.method = method;
    }

    public Fulfilment deliveryCode(DeliveryCodeEnum deliveryCode) {
        this.deliveryCode = deliveryCode;
        return this;
    }

    /**
     * The delivery promise that applies to this offer. This value will only be used in combination with fulfilmentMethod &#39;FBR&#39;.
     *
     * @return deliveryCode
     **/
    @ApiModelProperty(value = "The delivery promise that applies to this offer. This value will only be used in combination with fulfilmentMethod 'FBR'.")
    public DeliveryCodeEnum getDeliveryCode() {
        return deliveryCode;
    }

    public void setDeliveryCode(DeliveryCodeEnum deliveryCode) {
        this.deliveryCode = deliveryCode;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Fulfilment fulfilment = (Fulfilment) o;
        return Objects.equals(this.method, fulfilment.method) &&
                Objects.equals(this.deliveryCode, fulfilment.deliveryCode);
    }

    @Override
    public int hashCode() {
        return Objects.hash(method, deliveryCode);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Fulfilment {\n");

        sb.append("    method: ").append(toIndentedString(method)).append("\n");
        sb.append("    deliveryCode: ").append(toIndentedString(deliveryCode)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

