/*
 * v8 - Retailer API
 * The bol.com API for retailers.
 *
 * OpenAPI spec version: 8.x
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import com.google.gson.reflect.TypeToken;
import io.swagger.client.*;
import io.swagger.client.model.BulkCommissionRequest;
import io.swagger.client.model.BulkCommissionResponse;
import io.swagger.client.model.Commission;

import java.io.IOException;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CommissionsApi {
    private ApiClient apiClient;

    public CommissionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CommissionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCommission
     *
     * @param ean                     The EAN number associated with this product. (required)
     * @param unitPrice               The price of the product with a period as a decimal separator. The price should always have two decimals precision. (required)
     * @param condition               The condition of the offer. (optional, default to NEW)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCommissionCall(String ean, BigDecimal unitPrice, String condition, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retailer/commission/{ean}"
                .replaceAll("\\{" + "ean" + "\\}", apiClient.escapeString(ean.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (condition != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("condition", condition));
        if (unitPrice != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("unit-price", unitPrice));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.retailer.v8+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCommissionValidateBeforeCall(String ean, BigDecimal unitPrice, String condition, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'ean' is set
        if (ean == null) {
            throw new ApiException("Missing the required parameter 'ean' when calling getCommission(Async)");
        }

        // verify the required parameter 'unitPrice' is set
        if (unitPrice == null) {
            throw new ApiException("Missing the required parameter 'unitPrice' when calling getCommission(Async)");
        }


        com.squareup.okhttp.Call call = getCommissionCall(ean, unitPrice, condition, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all commissions and reductions by EAN per single EAN
     * Commissions can be filtered by condition, which defaults to NEW. We will calculate the commission amount from the EAN and price.
     *
     * @param ean       The EAN number associated with this product. (required)
     * @param unitPrice The price of the product with a period as a decimal separator. The price should always have two decimals precision. (required)
     * @param condition The condition of the offer. (optional, default to NEW)
     * @return Commission
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Commission getCommission(String ean, BigDecimal unitPrice, String condition) throws ApiException {
        ApiResponse<Commission> resp = getCommissionWithHttpInfo(ean, unitPrice, condition);
        return resp.getData();
    }

    /**
     * Get all commissions and reductions by EAN per single EAN
     * Commissions can be filtered by condition, which defaults to NEW. We will calculate the commission amount from the EAN and price.
     *
     * @param ean       The EAN number associated with this product. (required)
     * @param unitPrice The price of the product with a period as a decimal separator. The price should always have two decimals precision. (required)
     * @param condition The condition of the offer. (optional, default to NEW)
     * @return ApiResponse&lt;Commission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Commission> getCommissionWithHttpInfo(String ean, BigDecimal unitPrice, String condition) throws ApiException {
        com.squareup.okhttp.Call call = getCommissionValidateBeforeCall(ean, unitPrice, condition, null, null);
        Type localVarReturnType = new TypeToken<Commission>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all commissions and reductions by EAN per single EAN (asynchronously)
     * Commissions can be filtered by condition, which defaults to NEW. We will calculate the commission amount from the EAN and price.
     *
     * @param ean       The EAN number associated with this product. (required)
     * @param unitPrice The price of the product with a period as a decimal separator. The price should always have two decimals precision. (required)
     * @param condition The condition of the offer. (optional, default to NEW)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCommissionAsync(String ean, BigDecimal unitPrice, String condition, final ApiCallback<Commission> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCommissionValidateBeforeCall(ean, unitPrice, condition, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Commission>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for getCommissions
     *
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCommissionsCall(BulkCommissionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/retailer/commission";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.retailer.v8+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/vnd.retailer.v8+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCommissionsValidateBeforeCall(BulkCommissionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = getCommissionsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all commissions and reductions by EAN in bulk
     * Gets all commissions and possible reductions by EAN, price, and optionally condition.
     *
     * @param body (optional)
     * @return BulkCommissionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BulkCommissionResponse getCommissions(BulkCommissionRequest body) throws ApiException {
        ApiResponse<BulkCommissionResponse> resp = getCommissionsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Get all commissions and reductions by EAN in bulk
     * Gets all commissions and possible reductions by EAN, price, and optionally condition.
     *
     * @param body (optional)
     * @return ApiResponse&lt;BulkCommissionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BulkCommissionResponse> getCommissionsWithHttpInfo(BulkCommissionRequest body) throws ApiException {
        com.squareup.okhttp.Call call = getCommissionsValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<BulkCommissionResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all commissions and reductions by EAN in bulk (asynchronously)
     * Gets all commissions and possible reductions by EAN, price, and optionally condition.
     *
     * @param body     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCommissionsAsync(BulkCommissionRequest body, final ApiCallback<BulkCommissionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCommissionsValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BulkCommissionResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
