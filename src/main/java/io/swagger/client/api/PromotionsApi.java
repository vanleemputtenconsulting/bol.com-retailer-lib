/*
 * v8 - Retailer API
 * The bol.com API for retailers.
 *
 * OpenAPI spec version: 8.x
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import com.google.gson.reflect.TypeToken;
import io.swagger.client.*;
import io.swagger.client.model.Products;
import io.swagger.client.model.Promotion;
import io.swagger.client.model.Promotions;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PromotionsApi {
    private ApiClient apiClient;

    public PromotionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PromotionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getProducts
     *
     * @param promotionId             The identifier of the promotion. (required)
     * @param page                    The requested page number with a page size of 50 items. (optional, default to 1)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProductsCall(String promotionId, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retailer/promotions/{promotion-id}/products"
                .replaceAll("\\{" + "promotion-id" + "\\}", apiClient.escapeString(promotionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.retailer.v8+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProductsValidateBeforeCall(String promotionId, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'promotionId' is set
        if (promotionId == null) {
            throw new ApiException("Missing the required parameter 'promotionId' when calling getProducts(Async)");
        }


        com.squareup.okhttp.Call call = getProductsCall(promotionId, page, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a list of products
     * Gets a paginated list of all products that are present within a promotion.
     *
     * @param promotionId The identifier of the promotion. (required)
     * @param page        The requested page number with a page size of 50 items. (optional, default to 1)
     * @return Products
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Products getProducts(String promotionId, Integer page) throws ApiException {
        ApiResponse<Products> resp = getProductsWithHttpInfo(promotionId, page);
        return resp.getData();
    }

    /**
     * Get a list of products
     * Gets a paginated list of all products that are present within a promotion.
     *
     * @param promotionId The identifier of the promotion. (required)
     * @param page        The requested page number with a page size of 50 items. (optional, default to 1)
     * @return ApiResponse&lt;Products&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Products> getProductsWithHttpInfo(String promotionId, Integer page) throws ApiException {
        com.squareup.okhttp.Call call = getProductsValidateBeforeCall(promotionId, page, null, null);
        Type localVarReturnType = new TypeToken<Products>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of products (asynchronously)
     * Gets a paginated list of all products that are present within a promotion.
     *
     * @param promotionId The identifier of the promotion. (required)
     * @param page        The requested page number with a page size of 50 items. (optional, default to 1)
     * @param callback    The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProductsAsync(String promotionId, Integer page, final ApiCallback<Products> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProductsValidateBeforeCall(promotionId, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Products>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for getPromotion
     *
     * @param promotionId             The identifier of the promotion. (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPromotionCall(String promotionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retailer/promotions/{promotion-id}"
                .replaceAll("\\{" + "promotion-id" + "\\}", apiClient.escapeString(promotionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.retailer.v8+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPromotionValidateBeforeCall(String promotionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'promotionId' is set
        if (promotionId == null) {
            throw new ApiException("Missing the required parameter 'promotionId' when calling getPromotion(Async)");
        }


        com.squareup.okhttp.Call call = getPromotionCall(promotionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a promotion by promotion id
     * Gets the details of a promotion.
     *
     * @param promotionId The identifier of the promotion. (required)
     * @return Promotion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Promotion getPromotion(String promotionId) throws ApiException {
        ApiResponse<Promotion> resp = getPromotionWithHttpInfo(promotionId);
        return resp.getData();
    }

    /**
     * Get a promotion by promotion id
     * Gets the details of a promotion.
     *
     * @param promotionId The identifier of the promotion. (required)
     * @return ApiResponse&lt;Promotion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Promotion> getPromotionWithHttpInfo(String promotionId) throws ApiException {
        com.squareup.okhttp.Call call = getPromotionValidateBeforeCall(promotionId, null, null);
        Type localVarReturnType = new TypeToken<Promotion>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a promotion by promotion id (asynchronously)
     * Gets the details of a promotion.
     *
     * @param promotionId The identifier of the promotion. (required)
     * @param callback    The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPromotionAsync(String promotionId, final ApiCallback<Promotion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPromotionValidateBeforeCall(promotionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Promotion>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for getPromotions
     *
     * @param promotionType           The type(s) of promotion to be retrieved. (required)
     * @param page                    The requested page number with a page size of 50 items. (optional, default to 1)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPromotionsCall(List<String> promotionType, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retailer/promotions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (promotionType != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "promotion-type", promotionType));
        if (page != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.retailer.v8+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPromotionsValidateBeforeCall(List<String> promotionType, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'promotionType' is set
        if (promotionType == null) {
            throw new ApiException("Missing the required parameter 'promotionType' when calling getPromotions(Async)");
        }


        com.squareup.okhttp.Call call = getPromotionsCall(promotionType, page, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a list of promotions
     * Gets a paginated list of all promotions for a retailer.
     *
     * @param promotionType The type(s) of promotion to be retrieved. (required)
     * @param page          The requested page number with a page size of 50 items. (optional, default to 1)
     * @return Promotions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Promotions getPromotions(List<String> promotionType, Integer page) throws ApiException {
        ApiResponse<Promotions> resp = getPromotionsWithHttpInfo(promotionType, page);
        return resp.getData();
    }

    /**
     * Get a list of promotions
     * Gets a paginated list of all promotions for a retailer.
     *
     * @param promotionType The type(s) of promotion to be retrieved. (required)
     * @param page          The requested page number with a page size of 50 items. (optional, default to 1)
     * @return ApiResponse&lt;Promotions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Promotions> getPromotionsWithHttpInfo(List<String> promotionType, Integer page) throws ApiException {
        com.squareup.okhttp.Call call = getPromotionsValidateBeforeCall(promotionType, page, null, null);
        Type localVarReturnType = new TypeToken<Promotions>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of promotions (asynchronously)
     * Gets a paginated list of all promotions for a retailer.
     *
     * @param promotionType The type(s) of promotion to be retrieved. (required)
     * @param page          The requested page number with a page size of 50 items. (optional, default to 1)
     * @param callback      The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPromotionsAsync(List<String> promotionType, Integer page, final ApiCallback<Promotions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPromotionsValidateBeforeCall(promotionType, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Promotions>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
