/*
 * v8 - Retailer API
 * The bol.com API for retailers.
 *
 * OpenAPI spec version: 8.x
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import org.threeten.bp.LocalDate;

import java.io.IOException;
import java.util.Objects;

/**
 * OrderFulfilment
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-12-04T20:35:33.904+01:00")
public class OrderFulfilment {
    @SerializedName("method")
    private String method = null;

    /**
     * The party that manages the distribution, either bol.com or the retailer itself.
     */
    @JsonAdapter(DistributionPartyEnum.Adapter.class)
    public enum DistributionPartyEnum {
        RETAILER("RETAILER"),

        BOL("BOL");

        private String value;

        DistributionPartyEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static DistributionPartyEnum fromValue(String text) {
            for (DistributionPartyEnum b : DistributionPartyEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<DistributionPartyEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final DistributionPartyEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public DistributionPartyEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return DistributionPartyEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("distributionParty")
    private DistributionPartyEnum distributionParty = null;

    @SerializedName("latestDeliveryDate")
    private LocalDate latestDeliveryDate = null;

    @SerializedName("exactDeliveryDate")
    private LocalDate exactDeliveryDate = null;

    @SerializedName("expiryDate")
    private LocalDate expiryDate = null;

    /**
     * Delivery option selected by the customer.
     */
    @JsonAdapter(TimeFrameTypeEnum.Adapter.class)
    public enum TimeFrameTypeEnum {
        REGULAR("REGULAR"),

        EVENING("EVENING"),

        APPOINTMENT("APPOINTMENT"),

        SAMEDAY("SAMEDAY"),

        SUNDAY("SUNDAY");

        private String value;

        TimeFrameTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static TimeFrameTypeEnum fromValue(String text) {
            for (TimeFrameTypeEnum b : TimeFrameTypeEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<TimeFrameTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final TimeFrameTypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public TimeFrameTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return TimeFrameTypeEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("timeFrameType")
    private TimeFrameTypeEnum timeFrameType = null;

    public OrderFulfilment method(String method) {
        this.method = method;
        return this;
    }

    /**
     * The fulfilment method. Fulfilled by the retailer (FBR) or fulfilled by bol.com (FBB).
     *
     * @return method
     **/
    @ApiModelProperty(example = "FBR", value = "The fulfilment method. Fulfilled by the retailer (FBR) or fulfilled by bol.com (FBB).")
    public String getMethod() {
        return method;
    }

    public void setMethod(String method) {
        this.method = method;
    }

    public OrderFulfilment distributionParty(DistributionPartyEnum distributionParty) {
        this.distributionParty = distributionParty;
        return this;
    }

    /**
     * The party that manages the distribution, either bol.com or the retailer itself.
     *
     * @return distributionParty
     **/
    @ApiModelProperty(example = "RETAILER", value = "The party that manages the distribution, either bol.com or the retailer itself.")
    public DistributionPartyEnum getDistributionParty() {
        return distributionParty;
    }

    public void setDistributionParty(DistributionPartyEnum distributionParty) {
        this.distributionParty = distributionParty;
    }

    public OrderFulfilment latestDeliveryDate(LocalDate latestDeliveryDate) {
        this.latestDeliveryDate = latestDeliveryDate;
        return this;
    }

    /**
     * The ultimate delivery date at which this order must be delivered at the customer&#39;s shipping address. This field is empty in case the exactDeliveryDate is filled.
     *
     * @return latestDeliveryDate
     **/
    @ApiModelProperty(example = "2017-02-10", value = "The ultimate delivery date at which this order must be delivered at the customer's shipping address. This field is empty in case the exactDeliveryDate is filled.")
    public LocalDate getLatestDeliveryDate() {
        return latestDeliveryDate;
    }

    public void setLatestDeliveryDate(LocalDate latestDeliveryDate) {
        this.latestDeliveryDate = latestDeliveryDate;
    }

    public OrderFulfilment exactDeliveryDate(LocalDate exactDeliveryDate) {
        this.exactDeliveryDate = exactDeliveryDate;
        return this;
    }

    /**
     * The exact delivery date at which this order must be delivered at the customer&#39;s shipping address. This field is only filled when the customer chose an exact date for delivery. This field is empty in case the latestDeliveryDate is filled.
     *
     * @return exactDeliveryDate
     **/
    @ApiModelProperty(example = "2017-02-13", value = "The exact delivery date at which this order must be delivered at the customer's shipping address. This field is only filled when the customer chose an exact date for delivery. This field is empty in case the latestDeliveryDate is filled.")
    public LocalDate getExactDeliveryDate() {
        return exactDeliveryDate;
    }

    public void setExactDeliveryDate(LocalDate exactDeliveryDate) {
        this.exactDeliveryDate = exactDeliveryDate;
    }

    public OrderFulfilment expiryDate(LocalDate expiryDate) {
        this.expiryDate = expiryDate;
        return this;
    }

    /**
     * The date this order item will automatically expire and thereby cancelling this order item from the order.
     *
     * @return expiryDate
     **/
    @ApiModelProperty(example = "2017-02-13", value = "The date this order item will automatically expire and thereby cancelling this order item from the order.")
    public LocalDate getExpiryDate() {
        return expiryDate;
    }

    public void setExpiryDate(LocalDate expiryDate) {
        this.expiryDate = expiryDate;
    }

    public OrderFulfilment timeFrameType(TimeFrameTypeEnum timeFrameType) {
        this.timeFrameType = timeFrameType;
        return this;
    }

    /**
     * Delivery option selected by the customer.
     *
     * @return timeFrameType
     **/
    @ApiModelProperty(example = "REGULAR", value = "Delivery option selected by the customer.")
    public TimeFrameTypeEnum getTimeFrameType() {
        return timeFrameType;
    }

    public void setTimeFrameType(TimeFrameTypeEnum timeFrameType) {
        this.timeFrameType = timeFrameType;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrderFulfilment orderFulfilment = (OrderFulfilment) o;
        return Objects.equals(this.method, orderFulfilment.method) &&
                Objects.equals(this.distributionParty, orderFulfilment.distributionParty) &&
                Objects.equals(this.latestDeliveryDate, orderFulfilment.latestDeliveryDate) &&
                Objects.equals(this.exactDeliveryDate, orderFulfilment.exactDeliveryDate) &&
                Objects.equals(this.expiryDate, orderFulfilment.expiryDate) &&
                Objects.equals(this.timeFrameType, orderFulfilment.timeFrameType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(method, distributionParty, latestDeliveryDate, exactDeliveryDate, expiryDate, timeFrameType);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OrderFulfilment {\n");

        sb.append("    method: ").append(toIndentedString(method)).append("\n");
        sb.append("    distributionParty: ").append(toIndentedString(distributionParty)).append("\n");
        sb.append("    latestDeliveryDate: ").append(toIndentedString(latestDeliveryDate)).append("\n");
        sb.append("    exactDeliveryDate: ").append(toIndentedString(exactDeliveryDate)).append("\n");
        sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
        sb.append("    timeFrameType: ").append(toIndentedString(timeFrameType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

