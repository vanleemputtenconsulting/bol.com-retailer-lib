/*
 * v8 - Retailer API
 * The bol.com API for retailers.
 *
 * OpenAPI spec version: 8.x
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.Objects;

/**
 * Condition
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-12-04T20:35:33.904+01:00")
public class Condition {
    /**
     * The condition of the offered product.
     */
    @JsonAdapter(NameEnum.Adapter.class)
    public enum NameEnum {
        NEW("NEW"),

        AS_NEW("AS_NEW"),

        GOOD("GOOD"),

        REASONABLE("REASONABLE"),

        MODERATE("MODERATE");

        private String value;

        NameEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static NameEnum fromValue(String text) {
            for (NameEnum b : NameEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<NameEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final NameEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public NameEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return NameEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("name")
    private NameEnum name = null;

    /**
     * The category of the condition. If not given NEW or SECONDHAND is derived from NAME.
     */
    @JsonAdapter(CategoryEnum.Adapter.class)
    public enum CategoryEnum {
        NEW("NEW"),

        SECONDHAND("SECONDHAND");

        private String value;

        CategoryEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static CategoryEnum fromValue(String text) {
            for (CategoryEnum b : CategoryEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<CategoryEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public CategoryEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return CategoryEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("category")
    private CategoryEnum category = null;

    @SerializedName("comment")
    private String comment = null;

    public Condition name(NameEnum name) {
        this.name = name;
        return this;
    }

    /**
     * The condition of the offered product.
     *
     * @return name
     **/
    @ApiModelProperty(example = "AS_NEW", required = true, value = "The condition of the offered product.")
    public NameEnum getName() {
        return name;
    }

    public void setName(NameEnum name) {
        this.name = name;
    }

    public Condition category(CategoryEnum category) {
        this.category = category;
        return this;
    }

    /**
     * The category of the condition. If not given NEW or SECONDHAND is derived from NAME.
     *
     * @return category
     **/
    @ApiModelProperty(example = "SECONDHAND", value = "The category of the condition. If not given NEW or SECONDHAND is derived from NAME.")
    public CategoryEnum getCategory() {
        return category;
    }

    public void setCategory(CategoryEnum category) {
        this.category = category;
    }

    public Condition comment(String comment) {
        this.comment = comment;
        return this;
    }

    /**
     * The description of the condition of the product. Only allowed if name is not NEW and may not contain e-mail addresses.
     *
     * @return comment
     **/
    @ApiModelProperty(example = "Heeft een koffie vlek op de kaft.", value = "The description of the condition of the product. Only allowed if name is not NEW and may not contain e-mail addresses.")
    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Condition condition = (Condition) o;
        return Objects.equals(this.name, condition.name) &&
                Objects.equals(this.category, condition.category) &&
                Objects.equals(this.comment, condition.comment);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, category, comment);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Condition {\n");

        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    category: ").append(toIndentedString(category)).append("\n");
        sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

