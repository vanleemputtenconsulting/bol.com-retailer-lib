/*
 * v8 - Retailer API
 * The bol.com API for retailers.
 *
 * OpenAPI spec version: 8.x
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package be.datafarmhouse.bol.api;

import be.datafarmhouse.bol.model.*;
import org.junit.Ignore;
import org.junit.Test;

/**
 * API tests for OffersApi
 */
@Ignore
public class OffersApiTest {

    private final OffersApi api = new OffersApi();


    /**
     * Delete offer by id
     * <p>
     * Delete an offer by id.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void deleteOfferTest() throws Exception {
        String offerId = null;
        ProcessStatus response = api.deleteOffer(offerId);

        // TODO: test validations
    }

    /**
     * Retrieve an offer by its offer id
     * <p>
     * Retrieve an offer by using the offer id provided to you when creating or listing your offers.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void getOfferTest() throws Exception {
        String offerId = null;
        RetailerOffer response = api.getOffer(offerId);

        // TODO: test validations
    }

    /**
     * Retrieve an offer export file by offer export id
     * <p>
     * Retrieve an offer export file containing all offers.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void getOfferExportTest() throws Exception {
        String reportId = null;
        api.getOfferExport(reportId);

        // TODO: test validations
    }

    /**
     * Retrieve an unpublished offer report by report id
     * <p>
     * Retrieve an unpublished offer report containing all unpublished offers and reasons.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void getUnpublishedOfferReportTest() throws Exception {
        String reportId = null;
        api.getUnpublishedOfferReport(reportId);

        // TODO: test validations
    }

    /**
     * Create a new offer
     * <p>
     * Creates a new offer, and adds it to the catalog. After creation, status information can be retrieved to review if the offer is valid and published to the shop.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void postOfferTest() throws Exception {
        CreateOfferRequest body = null;
        ProcessStatus response = api.postOffer(body);

        // TODO: test validations
    }

    /**
     * Request an offer export file
     * <p>
     * Request an offer export file containing all offers.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void postOfferExportTest() throws Exception {
        CreateOfferExportRequest body = null;
        ProcessStatus response = api.postOfferExport(body);

        // TODO: test validations
    }

    /**
     * Request an unpublished offer report
     * <p>
     * Request an unpublished offer report containing all unpublished offers and reasons.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void postUnpublishedOfferReportTest() throws Exception {
        CreateUnpublishedOfferReportRequest body = null;
        ProcessStatus response = api.postUnpublishedOfferReport(body);

        // TODO: test validations
    }

    /**
     * Update an offer
     * <p>
     * Use this endpoint to send an offer update. This endpoint returns a process status.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void putOfferTest() throws Exception {
        String offerId = null;
        UpdateOfferRequest body = null;
        ProcessStatus response = api.putOffer(offerId, body);

        // TODO: test validations
    }

    /**
     * Update price(s) for offer by id
     * <p>
     * Update price(s) for offer by id.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void updateOfferPriceTest() throws Exception {
        String offerId = null;
        UpdateOfferPriceRequest body = null;
        ProcessStatus response = api.updateOfferPrice(offerId, body);

        // TODO: test validations
    }

    /**
     * Update stock for offer by id
     * <p>
     * Update stock for offer by id.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void updateOfferStockTest() throws Exception {
        String offerId = null;
        UpdateOfferStockRequest body = null;
        ProcessStatus response = api.updateOfferStock(offerId, body);

        // TODO: test validations
    }

}
